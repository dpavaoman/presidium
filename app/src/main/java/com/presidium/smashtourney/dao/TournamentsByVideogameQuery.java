//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.1.0'.
//
package com.presidium.smashtourney.dao;

import com.apollographql.apollo3.api.Adapter;
import com.apollographql.apollo3.api.CompiledField;
import com.apollographql.apollo3.api.CustomScalarAdapters;
import com.apollographql.apollo3.api.ObjectAdapter;
import com.apollographql.apollo3.api.Query;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.presidium.smashtourney.dao.adapter.TournamentsByVideogameQuery_ResponseAdapter;
import com.presidium.smashtourney.dao.selections.TournamentsByVideogameQuerySelections;

import java.io.IOException;
import java.util.List;

public class TournamentsByVideogameQuery implements Query<TournamentsByVideogameQuery.Data> {
  public static final String OPERATION_ID = "7c6a8b7d56d51ef76db6b44aff762652d41ac7fff21a46dddca09eb68f9c4e06";

  /**
   * The minimized GraphQL document being sent to the server to save a few bytes.
   * The un-minimized version is:
   *
   * query TournamentsByVideogame {
   *   tournaments(query: {
   *     perPage: 3
   *     page: 1
   *     sortBy: "startAt asc"
   *     filter: {
   *       past: false
   *       videogameIds: \[1\]
   *     }
   *
   *   }
   *   ) {
   *     nodes {
   *       id
   *       name
   *       slug
   *     }
   *   }
   * }
   */
  public static final String OPERATION_DOCUMENT = "query TournamentsByVideogame { tournaments(query: { perPage: 3 page: 1 sortBy: \"startAt asc\" filter: { past: false videogameIds: [1] }  } ) { nodes { id name slug } } }";

  public static final String OPERATION_NAME = "TournamentsByVideogame";

  private transient volatile int $hashCode;

  private transient volatile boolean $hashCodeMemoized;

  private transient volatile String $toString;

  public TournamentsByVideogameQuery() {

  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof TournamentsByVideogameQuery) {
      return true;
    }
    return false;
  }

  @Override
  public int hashCode() {
    if (!$hashCodeMemoized) {
      int h = 1;
      $hashCode = h;
      $hashCodeMemoized = true;
    }
    return $hashCode;
  }

  @Override
  public String toString() {
    if ($toString == null) {
      $toString = OPERATION_DOCUMENT;
    }
    return $toString;
  }

  @Override
  public String id() {
    return OPERATION_ID;
  }

  @Override
  public String document() {
    return OPERATION_DOCUMENT;
  }

  @Override
  public String name() {
    return OPERATION_NAME;
  }

  @Override
  public void serializeVariables(JsonWriter writer, CustomScalarAdapters customScalarAdapters)
      throws IOException {
    // This operation doesn't have any variable
  }

  @Override
  public Adapter<Data> adapter() {
    return new ObjectAdapter<Data>(TournamentsByVideogameQuery_ResponseAdapter.Data.INSTANCE, false);
  }

  @Override
  public CompiledField rootField() {
    return new CompiledField.Builder(
      "data",
      com.presidium.smashtourney.dao.type.Query.type
    )
    .selections(TournamentsByVideogameQuerySelections.root)
    .build();
  }

  public static class Data implements Query.Data {
    /**
     * Paginated, filterable list of tournaments
     */
    public Tournaments tournaments;

    private transient volatile int $hashCode;

    private transient volatile boolean $hashCodeMemoized;

    private transient volatile String $toString;

    public Data(Tournaments tournaments) {
      this.tournaments = tournaments;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (o instanceof Data) {
        Data that = (Data) o;
        return ((this.tournaments == null) ? (that.tournaments == null) : this.tournaments.equals(that.tournaments));
      }
      return false;
    }

    @Override
    public int hashCode() {
      if (!$hashCodeMemoized) {
        int h = 1;
        h *= 1000003;
        h ^= (tournaments == null) ? 0 : tournaments.hashCode();
        $hashCode = h;
        $hashCodeMemoized = true;
      }
      return $hashCode;
    }

    @Override
    public String toString() {
      if ($toString == null) {
        $toString = "Data{"
          + "tournaments=" + tournaments
          + "}";
      }
      return $toString;
    }
  }

  public static class Tournaments {
    public List<Node> nodes;

    private transient volatile int $hashCode;

    private transient volatile boolean $hashCodeMemoized;

    private transient volatile String $toString;

    public Tournaments(List<Node> nodes) {
      this.nodes = nodes;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (o instanceof Tournaments) {
        Tournaments that = (Tournaments) o;
        return ((this.nodes == null) ? (that.nodes == null) : this.nodes.equals(that.nodes));
      }
      return false;
    }

    @Override
    public int hashCode() {
      if (!$hashCodeMemoized) {
        int h = 1;
        h *= 1000003;
        h ^= (nodes == null) ? 0 : nodes.hashCode();
        $hashCode = h;
        $hashCodeMemoized = true;
      }
      return $hashCode;
    }

    @Override
    public String toString() {
      if ($toString == null) {
        $toString = "Tournaments{"
          + "nodes=" + nodes
          + "}";
      }
      return $toString;
    }
  }

  public static class Node {
    public String id;

    /**
     * The tournament name
     */
    public String name;

    /**
     * The slug used to form the url
     */
    public String slug;

    private transient volatile int $hashCode;

    private transient volatile boolean $hashCodeMemoized;

    private transient volatile String $toString;

    public Node(String id, String name, String slug) {
      this.id = id;
      this.name = name;
      this.slug = slug;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (o instanceof Node) {
        Node that = (Node) o;
        return ((this.id == null) ? (that.id == null) : this.id.equals(that.id))
         &&((this.name == null) ? (that.name == null) : this.name.equals(that.name))
         &&((this.slug == null) ? (that.slug == null) : this.slug.equals(that.slug));
      }
      return false;
    }

    @Override
    public int hashCode() {
      if (!$hashCodeMemoized) {
        int h = 1;
        h *= 1000003;
        h ^= (id == null) ? 0 : id.hashCode();
        h *= 1000003;
        h ^= (name == null) ? 0 : name.hashCode();
        h *= 1000003;
        h ^= (slug == null) ? 0 : slug.hashCode();
        $hashCode = h;
        $hashCodeMemoized = true;
      }
      return $hashCode;
    }

    @Override
    public String toString() {
      if ($toString == null) {
        $toString = "Node{"
          + "id=" + id + ", "
          + "name=" + name + ", "
          + "slug=" + slug
          + "}";
      }
      return $toString;
    }
  }
}
