//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.1.0'.
//
package com.presidium.smashtourney.dao.adapter;

import com.apollographql.apollo3.api.Adapter;
import com.apollographql.apollo3.api.Adapters;
import com.apollographql.apollo3.api.CustomScalarAdapters;
import com.apollographql.apollo3.api.ListAdapter;
import com.apollographql.apollo3.api.NullableAdapter;
import com.apollographql.apollo3.api.ObjectAdapter;
import com.apollographql.apollo3.api.json.JsonReader;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.presidium.smashtourney.dao.EventsByTournamentQuery;

import java.io.IOException;
import java.util.Arrays;
import java.util.List;

public class EventsByTournamentQuery_ResponseAdapter {
  public enum Data implements Adapter<EventsByTournamentQuery.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("tournament");

    @Override
    public EventsByTournamentQuery.Data fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      EventsByTournamentQuery.Tournament tournament = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: tournament = new NullableAdapter<>(new ObjectAdapter<EventsByTournamentQuery.Tournament>(Tournament.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new EventsByTournamentQuery.Data(
        tournament
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        EventsByTournamentQuery.Data value) throws IOException {
      writer.name("tournament");
      new NullableAdapter<>(new ObjectAdapter<EventsByTournamentQuery.Tournament>(Tournament.INSTANCE, false)).toJson(writer, customScalarAdapters, value.tournament);
    }
  }

  public enum Tournament implements Adapter<EventsByTournamentQuery.Tournament> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("id", "events");

    @Override
    public EventsByTournamentQuery.Tournament fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String id = null;
      List<EventsByTournamentQuery.Event> events = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: id = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: events = new NullableAdapter<>(new ListAdapter<>(new NullableAdapter<>(new ObjectAdapter<EventsByTournamentQuery.Event>(Event.INSTANCE, false)))).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new EventsByTournamentQuery.Tournament(
        id,
        events
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        EventsByTournamentQuery.Tournament value) throws IOException {
      writer.name("id");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.id);

      writer.name("events");
      new NullableAdapter<>(new ListAdapter<>(new NullableAdapter<>(new ObjectAdapter<EventsByTournamentQuery.Event>(Event.INSTANCE, false)))).toJson(writer, customScalarAdapters, value.events);
    }
  }

  public enum Event implements Adapter<EventsByTournamentQuery.Event> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("name", "videogame", "id");

    @Override
    public EventsByTournamentQuery.Event fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String name = null;
      EventsByTournamentQuery.Videogame videogame = null;
      String id = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: name = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: videogame = new NullableAdapter<>(new ObjectAdapter<EventsByTournamentQuery.Videogame>(Videogame.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 2: id = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new EventsByTournamentQuery.Event(
        name,
        videogame,
        id
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        EventsByTournamentQuery.Event value) throws IOException {
      writer.name("name");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.name);

      writer.name("videogame");
      new NullableAdapter<>(new ObjectAdapter<EventsByTournamentQuery.Videogame>(Videogame.INSTANCE, false)).toJson(writer, customScalarAdapters, value.videogame);

      writer.name("id");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.id);
    }
  }

  public enum Videogame implements Adapter<EventsByTournamentQuery.Videogame> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("id");

    @Override
    public EventsByTournamentQuery.Videogame fromJson(JsonReader reader,
        CustomScalarAdapters customScalarAdapters) throws IOException {
      String id = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: id = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new EventsByTournamentQuery.Videogame(
        id
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        EventsByTournamentQuery.Videogame value) throws IOException {
      writer.name("id");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.id);
    }
  }
}
