//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '3.1.0'.
//
package com.presidium.smashtourney.dao.adapter;

import com.apollographql.apollo3.api.Adapter;
import com.apollographql.apollo3.api.Adapters;
import com.apollographql.apollo3.api.CustomScalarAdapters;
import com.apollographql.apollo3.api.ListAdapter;
import com.apollographql.apollo3.api.NullableAdapter;
import com.apollographql.apollo3.api.ObjectAdapter;
import com.apollographql.apollo3.api.json.JsonReader;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.presidium.smashtourney.dao.EventStandingsQuery;

import java.io.IOException;
import java.util.Arrays;
import java.util.List;

public class EventStandingsQuery_ResponseAdapter {
  public enum Data implements Adapter<EventStandingsQuery.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("event");

    @Override
    public EventStandingsQuery.Data fromJson(JsonReader reader,
											 CustomScalarAdapters customScalarAdapters) throws IOException {
      EventStandingsQuery.Event event = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: event = new NullableAdapter<>(new ObjectAdapter<EventStandingsQuery.Event>(Event.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new EventStandingsQuery.Data(
        event
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        EventStandingsQuery.Data value) throws IOException {
      writer.name("event");
      new NullableAdapter<>(new ObjectAdapter<EventStandingsQuery.Event>(Event.INSTANCE, false)).toJson(writer, customScalarAdapters, value.event);
    }
  }

  public enum Event implements Adapter<EventStandingsQuery.Event> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("id", "name", "standings");

    @Override
    public EventStandingsQuery.Event fromJson(JsonReader reader,
											  CustomScalarAdapters customScalarAdapters) throws IOException {
      String id = null;
      String name = null;
      EventStandingsQuery.Standings standings = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: id = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: name = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 2: standings = new NullableAdapter<>(new ObjectAdapter<EventStandingsQuery.Standings>(Standings.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new EventStandingsQuery.Event(
        id,
        name,
        standings
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        EventStandingsQuery.Event value) throws IOException {
      writer.name("id");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.id);

      writer.name("name");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.name);

      writer.name("standings");
      new NullableAdapter<>(new ObjectAdapter<EventStandingsQuery.Standings>(Standings.INSTANCE, false)).toJson(writer, customScalarAdapters, value.standings);
    }
  }

  public enum Standings implements Adapter<EventStandingsQuery.Standings> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("nodes");

    @Override
    public EventStandingsQuery.Standings fromJson(JsonReader reader,
												  CustomScalarAdapters customScalarAdapters) throws IOException {
      List<EventStandingsQuery.Node> nodes = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: nodes = new NullableAdapter<>(new ListAdapter<>(new NullableAdapter<>(new ObjectAdapter<EventStandingsQuery.Node>(Node.INSTANCE, false)))).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new EventStandingsQuery.Standings(
        nodes
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        EventStandingsQuery.Standings value) throws IOException {
      writer.name("nodes");
      new NullableAdapter<>(new ListAdapter<>(new NullableAdapter<>(new ObjectAdapter<EventStandingsQuery.Node>(Node.INSTANCE, false)))).toJson(writer, customScalarAdapters, value.nodes);
    }
  }

  public enum Node implements Adapter<EventStandingsQuery.Node> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("placement", "entrant");

    @Override
    public EventStandingsQuery.Node fromJson(JsonReader reader,
											 CustomScalarAdapters customScalarAdapters) throws IOException {
      Integer placement = null;
      EventStandingsQuery.Entrant entrant = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: placement = Adapters.NullableIntAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: entrant = new NullableAdapter<>(new ObjectAdapter<EventStandingsQuery.Entrant>(Entrant.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new EventStandingsQuery.Node(
        placement,
        entrant
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        EventStandingsQuery.Node value) throws IOException {
      writer.name("placement");
      Adapters.NullableIntAdapter.toJson(writer, customScalarAdapters, value.placement);

      writer.name("entrant");
      new NullableAdapter<>(new ObjectAdapter<EventStandingsQuery.Entrant>(Entrant.INSTANCE, false)).toJson(writer, customScalarAdapters, value.entrant);
    }
  }

  public enum Entrant implements Adapter<EventStandingsQuery.Entrant> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("id", "name");

    @Override
    public EventStandingsQuery.Entrant fromJson(JsonReader reader,
												CustomScalarAdapters customScalarAdapters) throws IOException {
      String id = null;
      String name = null;

      loop:
      while(true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: id = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: name = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new EventStandingsQuery.Entrant(
        id,
        name
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        EventStandingsQuery.Entrant value) throws IOException {
      writer.name("id");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.id);

      writer.name("name");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.name);
    }
  }
}
